@startuml qaq
' !include core.puml
class Codec {
    -MessageBuffer m_buffer     
    -MessageBuffer::Cursor m_cursor
    -erpc_status_t m_status  
    ==
    +Codec()
    +virtual ~Codec()
    ..buffer..
    +MessageBuffer *getBuffer()
    +virtual void setBuffer(MessageBuffer &buf)
    +virtual void reset()
    ..status..
    +erpc_status_t getStatus()
    +bool isStatusOk()
    +void updateStatus(erpc_status_t status)
    ..write..
    +void {abstract} startWriteMessage() 
    +{abstract} void write(<basic_type> value)
    +{abstract} void write_special(...) 
    ..read..
    +{abstract} void startReadMessage() 
    +{abstract} void read(<basic_type> *value)
    +{abstract} void read_special(...)
      
}
note left of Codec::write
basic_type: 
bool    int8_t
int16_t int32_t
int64_t uint8_t
uint16  uint32
uint64  float 
double
end note
note left of Codec::write_special
special_type:
Pointer String
Binary  List
Union   NullFlag
array of Function Pointer
Function Pointer
end note
Codec o-- MessageBuffer
together {
    class Cursor
    class MessageBuffer
}
class MessageBuffer{
    -uint8_t *volatile m_buf;   
    -uint16_t volatile m_len;   
    -uint16_t volatile m_used; 
    ==
    +MessageBuffer()
    +MessageBuffer(uint8_t *buffer, uint16_t length)
    --attribute--
    +void set(uint8_t *buffer, uint16_t length) 
    +uint8_t *get() 
    +const uint8_t *get() 
    +uint16_t getLength() 
    +uint16_t getUsed() 
    +uint16_t getFree() 
    +void setUsed(uint16_t used); 
    --io--
    +erpc_status_t read(); 
    +erpc_status_t write(); 
    +erpc_status_t copy(); 
    +void swap(); 
    --operator--
    +operator uint8_t *() 
    +operator const uint8_t *() 
    +uint8_t &operator[](int index) 
    +const uint8_t &operator[](int index) 

}
note left of MessageBuffer::read 
io operation in MessageBuffer will not 
set the position of cursor.
end note


class Cursor{
    -MessageBuffer *m_buffer;  
    -uint8_t *m_pos;        
    ==
    +Cursor()
    +explicit Cursor(MessageBuffer *buffer)
    +void set(MessageBuffer *buffer); 
    +uint8_t *get() 
    +const uint8_t *get() 
    +uint16_t getRemaining() 
    +uint16_t getRemainingUsed() 
    +erpc_status_t read(void *data, uint32_t length); 
    +erpc_status_t write(const void *data, uint32_t length); 
    +operator uint8_t *() 
    +operator const uint8_t *() 
    +uint8_t &operator[](int index); 
    +const uint8_t &operator[](int index) const; 
    +Cursor &operator+=(uint16_t n); 
    +Cursor &operator-=(uint16_t n); 
    +Cursor &operator++(); 
    +Cursor &operator--(); 
}
MessageBuffer o-Cursor
Cursor o--MessageBuffer
Codec o-Cursor

BasicCodec-[hidden]-->Codec
class BasicCodec extends Codec{
    +{static} const uint32_t kBasicCodecVersion;
    +BasicCodec() 
    +virtual void startWriteMessage() override; 
    +virtual void writeData(const void *value, uint32_t length); 
    +virtual void write(bool value) override; 
    +virtual void startReadMessage() override
    +virtual void readData(void *value, uint32_t length); 
    +virtual void read(bool *value)
}


' enum _message_type
' {
'     kInvocationMessage 
'     kOnewayMessage,
'     kReplyMessage,
'     kNotificationMessage
' } message_type_t
@enduml