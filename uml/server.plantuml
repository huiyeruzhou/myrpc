@startuml server
' !include core.puml

class Service {    
    #uint32_t m_serviceId
    #Service *m_next
    ==
    +Service(uint32_t serviceId)
    +virtual ~Service(void)
    ..linked list..
    +uint32_t getServiceId(void)
    +Service *getNext(void)
    +void setNext(Service *next)
    ..Service..
    +{abstract}virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, Codec *codec,
    MessageBufferFactory *messageFactory)
}

class Server {
    #MessageBufferFactory *m_messageFactory;
    #CodecFactory *m_codecFactory;
    #Transport *m_transport;
    #Service *m_firstService


    ..register..
    +void addService(Service *service)
    +void removeService(Service *service)
    #virtual Service *findServiceWithId(uint32_t serviceId);
    ..config..
    +void setMessageBufferFactory(MessageBufferFactory * factory)
    +void setCodecFactory(CodecFactory *factory)
    +void setTransport(Transport *transport)
    +CodecFactory * getCodecFactory(void)
    +Transport * getTransport(void) 
    ..run..
    +{abstract}erpc_status_t run(void)
    +{abstract}void stop(void)
    #virtual erpc_status_t processMessage(Codec *codec, message_type_t msgType, uint32_t serviceId, uint32_t methodId,
    uint32_t sequence)
    #virtual erpc_status_t readHeadOfMessage(Codec *codec, message_type_t &msgType, uint32_t &serviceId,
    uint32_t &methodId, uint32_t &sequence)
    -Server(const Server &other);
    -Server &operator=(const Server &other);
}


@enduml