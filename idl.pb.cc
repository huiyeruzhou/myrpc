// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idl.proto

#include "idl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_idl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_proto_Nested_idl_2eproto;
namespace myrpc_matrix_multiply {
class proto_NestedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<proto_Nested> _instance;
} _proto_Nested_default_instance_;
class protoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<proto> _instance;
} _proto_default_instance_;
class InputTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputTest> _instance;
} _InputTest_default_instance_;
class OutputTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputTest> _instance;
} _OutputTest_default_instance_;
}  // namespace myrpc_matrix_multiply
static void InitDefaultsscc_info_InputTest_idl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myrpc_matrix_multiply::_InputTest_default_instance_;
    new (ptr) ::myrpc_matrix_multiply::InputTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myrpc_matrix_multiply::InputTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputTest_idl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputTest_idl_2eproto}, {}};

static void InitDefaultsscc_info_OutputTest_idl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myrpc_matrix_multiply::_OutputTest_default_instance_;
    new (ptr) ::myrpc_matrix_multiply::OutputTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myrpc_matrix_multiply::OutputTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputTest_idl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutputTest_idl_2eproto}, {}};

static void InitDefaultsscc_info_proto_idl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myrpc_matrix_multiply::_proto_default_instance_;
    new (ptr) ::myrpc_matrix_multiply::proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myrpc_matrix_multiply::proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_proto_idl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_proto_idl_2eproto}, {
      &scc_info_proto_Nested_idl_2eproto.base,}};

static void InitDefaultsscc_info_proto_Nested_idl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myrpc_matrix_multiply::_proto_Nested_default_instance_;
    new (ptr) ::myrpc_matrix_multiply::proto_Nested();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myrpc_matrix_multiply::proto_Nested::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_proto_Nested_idl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_proto_Nested_idl_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_idl_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_idl_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_idl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_idl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto_Nested, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto_Nested, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto_Nested, num1_),
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto_Nested, num2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto, num1_),
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto, qaq_),
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto, waw_),
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::proto, nested_),
  2,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::InputTest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::InputTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::InputTest, num1_),
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::InputTest, num2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::OutputTest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::OutputTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myrpc_matrix_multiply::OutputTest, ret_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::myrpc_matrix_multiply::proto_Nested)},
  { 9, 18, sizeof(::myrpc_matrix_multiply::proto)},
  { 22, 29, sizeof(::myrpc_matrix_multiply::InputTest)},
  { 31, 37, sizeof(::myrpc_matrix_multiply::OutputTest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myrpc_matrix_multiply::_proto_Nested_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myrpc_matrix_multiply::_proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myrpc_matrix_multiply::_InputTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myrpc_matrix_multiply::_OutputTest_default_instance_),
};

const char descriptor_table_protodef_idl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tidl.proto\022\025myrpc_matrix_multiply\"\212\001\n\005p"
  "roto\022\014\n\004num1\030\001 \002(\005\022\013\n\003qaq\030\003 \002(\t\022\013\n\003waw\030\004"
  " \003(\005\0223\n\006nested\030\002 \002(\0132#.myrpc_matrix_mult"
  "iply.proto.Nested\032$\n\006Nested\022\014\n\004num1\030\001 \002("
  "\005\022\014\n\004num2\030\002 \002(\005\"\'\n\tInputTest\022\014\n\004num1\030\001 \002"
  "(\005\022\014\n\004num2\030\002 \002(\005\"\031\n\nOutputTest\022\013\n\003ret\030\001 "
  "\002(\005*\023\n\001e\022\006\n\002e1\020\001\022\006\n\002e2\020\0022k\n\025MatrixMultip"
  "lyService\022R\n\tmyrpctest\022 .myrpc_matrix_mu"
  "ltiply.InputTest\032!.myrpc_matrix_multiply"
  ".OutputTest\"\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_idl_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_idl_2eproto_sccs[4] = {
  &scc_info_InputTest_idl_2eproto.base,
  &scc_info_OutputTest_idl_2eproto.base,
  &scc_info_proto_idl_2eproto.base,
  &scc_info_proto_Nested_idl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_idl_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_idl_2eproto = {
  false, false, descriptor_table_protodef_idl_2eproto, "idl.proto", 373,
  &descriptor_table_idl_2eproto_once, descriptor_table_idl_2eproto_sccs, descriptor_table_idl_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_idl_2eproto::offsets,
  file_level_metadata_idl_2eproto, 4, file_level_enum_descriptors_idl_2eproto, file_level_service_descriptors_idl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_idl_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_idl_2eproto)), true);
namespace myrpc_matrix_multiply {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* e_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_idl_2eproto);
  return file_level_enum_descriptors_idl_2eproto[0];
}
bool e_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void proto_Nested::InitAsDefaultInstance() {
}
class proto_Nested::_Internal {
 public:
  using HasBits = decltype(std::declval<proto_Nested>()._has_bits_);
  static void set_has_num1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

proto_Nested::proto_Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myrpc_matrix_multiply.proto.Nested)
}
proto_Nested::proto_Nested(const proto_Nested& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num1_, &from.num1_,
    static_cast<size_t>(reinterpret_cast<char*>(&num2_) -
    reinterpret_cast<char*>(&num1_)) + sizeof(num2_));
  // @@protoc_insertion_point(copy_constructor:myrpc_matrix_multiply.proto.Nested)
}

void proto_Nested::SharedCtor() {
  ::memset(&num1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num2_) -
      reinterpret_cast<char*>(&num1_)) + sizeof(num2_));
}

proto_Nested::~proto_Nested() {
  // @@protoc_insertion_point(destructor:myrpc_matrix_multiply.proto.Nested)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void proto_Nested::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void proto_Nested::ArenaDtor(void* object) {
  proto_Nested* _this = reinterpret_cast< proto_Nested* >(object);
  (void)_this;
}
void proto_Nested::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proto_Nested::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const proto_Nested& proto_Nested::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_proto_Nested_idl_2eproto.base);
  return *internal_default_instance();
}


void proto_Nested::Clear() {
// @@protoc_insertion_point(message_clear_start:myrpc_matrix_multiply.proto.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num2_) -
        reinterpret_cast<char*>(&num1_)) + sizeof(num2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proto_Nested::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 num1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num1(&has_bits);
          num1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num2(&has_bits);
          num2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* proto_Nested::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrpc_matrix_multiply.proto.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num1(), target);
  }

  // required int32 num2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myrpc_matrix_multiply.proto.Nested)
  return target;
}

size_t proto_Nested::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:myrpc_matrix_multiply.proto.Nested)
  size_t total_size = 0;

  if (_internal_has_num1()) {
    // required int32 num1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num1());
  }

  if (_internal_has_num2()) {
    // required int32 num2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num2());
  }

  return total_size;
}
size_t proto_Nested::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myrpc_matrix_multiply.proto.Nested)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 num1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num1());

    // required int32 num2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proto_Nested::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myrpc_matrix_multiply.proto.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  const proto_Nested* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<proto_Nested>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myrpc_matrix_multiply.proto.Nested)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myrpc_matrix_multiply.proto.Nested)
    MergeFrom(*source);
  }
}

void proto_Nested::MergeFrom(const proto_Nested& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myrpc_matrix_multiply.proto.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num1_ = from.num1_;
    }
    if (cached_has_bits & 0x00000002u) {
      num2_ = from.num2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void proto_Nested::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myrpc_matrix_multiply.proto.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_Nested::CopyFrom(const proto_Nested& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrpc_matrix_multiply.proto.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_Nested::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void proto_Nested::InternalSwap(proto_Nested* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(proto_Nested, num2_)
      + sizeof(proto_Nested::num2_)
      - PROTOBUF_FIELD_OFFSET(proto_Nested, num1_)>(
          reinterpret_cast<char*>(&num1_),
          reinterpret_cast<char*>(&other->num1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata proto_Nested::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void proto::InitAsDefaultInstance() {
  ::myrpc_matrix_multiply::_proto_default_instance_._instance.get_mutable()->nested_ = const_cast< ::myrpc_matrix_multiply::proto_Nested*>(
      ::myrpc_matrix_multiply::proto_Nested::internal_default_instance());
}
class proto::_Internal {
 public:
  using HasBits = decltype(std::declval<proto>()._has_bits_);
  static void set_has_num1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_qaq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::myrpc_matrix_multiply::proto_Nested& nested(const proto* msg);
  static void set_has_nested(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::myrpc_matrix_multiply::proto_Nested&
proto::_Internal::nested(const proto* msg) {
  return *msg->nested_;
}
proto::proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  waw_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myrpc_matrix_multiply.proto)
}
proto::proto(const proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      waw_(from.waw_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  qaq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_qaq()) {
    qaq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_qaq(),
      GetArena());
  }
  if (from._internal_has_nested()) {
    nested_ = new ::myrpc_matrix_multiply::proto_Nested(*from.nested_);
  } else {
    nested_ = nullptr;
  }
  num1_ = from.num1_;
  // @@protoc_insertion_point(copy_constructor:myrpc_matrix_multiply.proto)
}

void proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_proto_idl_2eproto.base);
  qaq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nested_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num1_) -
      reinterpret_cast<char*>(&nested_)) + sizeof(num1_));
}

proto::~proto() {
  // @@protoc_insertion_point(destructor:myrpc_matrix_multiply.proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  qaq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nested_;
}

void proto::ArenaDtor(void* object) {
  proto* _this = reinterpret_cast< proto* >(object);
  (void)_this;
}
void proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const proto& proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_proto_idl_2eproto.base);
  return *internal_default_instance();
}


void proto::Clear() {
// @@protoc_insertion_point(message_clear_start:myrpc_matrix_multiply.proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waw_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      qaq_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(nested_ != nullptr);
      nested_->Clear();
    }
  }
  num1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 num1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num1(&has_bits);
          num1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .myrpc_matrix_multiply.proto.Nested nested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string qaq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_qaq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myrpc_matrix_multiply.proto.qaq");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 waw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_waw(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_waw(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrpc_matrix_multiply.proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num1 = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num1(), target);
  }

  // required .myrpc_matrix_multiply.proto.Nested nested = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nested(this), target, stream);
  }

  // required string qaq = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_qaq().data(), static_cast<int>(this->_internal_qaq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "myrpc_matrix_multiply.proto.qaq");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_qaq(), target);
  }

  // repeated int32 waw = 4;
  for (int i = 0, n = this->_internal_waw_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_waw(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myrpc_matrix_multiply.proto)
  return target;
}

size_t proto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:myrpc_matrix_multiply.proto)
  size_t total_size = 0;

  if (_internal_has_qaq()) {
    // required string qaq = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_qaq());
  }

  if (_internal_has_nested()) {
    // required .myrpc_matrix_multiply.proto.Nested nested = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_);
  }

  if (_internal_has_num1()) {
    // required int32 num1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num1());
  }

  return total_size;
}
size_t proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myrpc_matrix_multiply.proto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string qaq = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_qaq());

    // required .myrpc_matrix_multiply.proto.Nested nested = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_);

    // required int32 num1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num1());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 waw = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->waw_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_waw_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myrpc_matrix_multiply.proto)
  GOOGLE_DCHECK_NE(&from, this);
  const proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myrpc_matrix_multiply.proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myrpc_matrix_multiply.proto)
    MergeFrom(*source);
  }
}

void proto::MergeFrom(const proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myrpc_matrix_multiply.proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waw_.MergeFrom(from.waw_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_qaq(from._internal_qaq());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nested()->::myrpc_matrix_multiply::proto_Nested::MergeFrom(from._internal_nested());
    }
    if (cached_has_bits & 0x00000004u) {
      num1_ = from.num1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myrpc_matrix_multiply.proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto::CopyFrom(const proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrpc_matrix_multiply.proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_nested()) {
    if (!nested_->IsInitialized()) return false;
  }
  return true;
}

void proto::InternalSwap(proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  waw_.InternalSwap(&other->waw_);
  qaq_.Swap(&other->qaq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(proto, num1_)
      + sizeof(proto::num1_)
      - PROTOBUF_FIELD_OFFSET(proto, nested_)>(
          reinterpret_cast<char*>(&nested_),
          reinterpret_cast<char*>(&other->nested_));
}

::PROTOBUF_NAMESPACE_ID::Metadata proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputTest::InitAsDefaultInstance() {
}
class InputTest::_Internal {
 public:
  using HasBits = decltype(std::declval<InputTest>()._has_bits_);
  static void set_has_num1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

InputTest::InputTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myrpc_matrix_multiply.InputTest)
}
InputTest::InputTest(const InputTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num1_, &from.num1_,
    static_cast<size_t>(reinterpret_cast<char*>(&num2_) -
    reinterpret_cast<char*>(&num1_)) + sizeof(num2_));
  // @@protoc_insertion_point(copy_constructor:myrpc_matrix_multiply.InputTest)
}

void InputTest::SharedCtor() {
  ::memset(&num1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num2_) -
      reinterpret_cast<char*>(&num1_)) + sizeof(num2_));
}

InputTest::~InputTest() {
  // @@protoc_insertion_point(destructor:myrpc_matrix_multiply.InputTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InputTest::ArenaDtor(void* object) {
  InputTest* _this = reinterpret_cast< InputTest* >(object);
  (void)_this;
}
void InputTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputTest& InputTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputTest_idl_2eproto.base);
  return *internal_default_instance();
}


void InputTest::Clear() {
// @@protoc_insertion_point(message_clear_start:myrpc_matrix_multiply.InputTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num2_) -
        reinterpret_cast<char*>(&num1_)) + sizeof(num2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 num1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num1(&has_bits);
          num1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num2(&has_bits);
          num2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrpc_matrix_multiply.InputTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num1(), target);
  }

  // required int32 num2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myrpc_matrix_multiply.InputTest)
  return target;
}

size_t InputTest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:myrpc_matrix_multiply.InputTest)
  size_t total_size = 0;

  if (_internal_has_num1()) {
    // required int32 num1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num1());
  }

  if (_internal_has_num2()) {
    // required int32 num2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num2());
  }

  return total_size;
}
size_t InputTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myrpc_matrix_multiply.InputTest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 num1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num1());

    // required int32 num2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myrpc_matrix_multiply.InputTest)
  GOOGLE_DCHECK_NE(&from, this);
  const InputTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myrpc_matrix_multiply.InputTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myrpc_matrix_multiply.InputTest)
    MergeFrom(*source);
  }
}

void InputTest::MergeFrom(const InputTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myrpc_matrix_multiply.InputTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num1_ = from.num1_;
    }
    if (cached_has_bits & 0x00000002u) {
      num2_ = from.num2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myrpc_matrix_multiply.InputTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputTest::CopyFrom(const InputTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrpc_matrix_multiply.InputTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputTest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InputTest::InternalSwap(InputTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputTest, num2_)
      + sizeof(InputTest::num2_)
      - PROTOBUF_FIELD_OFFSET(InputTest, num1_)>(
          reinterpret_cast<char*>(&num1_),
          reinterpret_cast<char*>(&other->num1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputTest::InitAsDefaultInstance() {
}
class OutputTest::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputTest>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

OutputTest::OutputTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myrpc_matrix_multiply.OutputTest)
}
OutputTest::OutputTest(const OutputTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:myrpc_matrix_multiply.OutputTest)
}

void OutputTest::SharedCtor() {
  ret_ = 0;
}

OutputTest::~OutputTest() {
  // @@protoc_insertion_point(destructor:myrpc_matrix_multiply.OutputTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutputTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OutputTest::ArenaDtor(void* object) {
  OutputTest* _this = reinterpret_cast< OutputTest* >(object);
  (void)_this;
}
void OutputTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputTest& OutputTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputTest_idl_2eproto.base);
  return *internal_default_instance();
}


void OutputTest::Clear() {
// @@protoc_insertion_point(message_clear_start:myrpc_matrix_multiply.OutputTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrpc_matrix_multiply.OutputTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myrpc_matrix_multiply.OutputTest)
  return target;
}

size_t OutputTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myrpc_matrix_multiply.OutputTest)
  size_t total_size = 0;

  // required int32 ret = 1;
  if (_internal_has_ret()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myrpc_matrix_multiply.OutputTest)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myrpc_matrix_multiply.OutputTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myrpc_matrix_multiply.OutputTest)
    MergeFrom(*source);
  }
}

void OutputTest::MergeFrom(const OutputTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myrpc_matrix_multiply.OutputTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
}

void OutputTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myrpc_matrix_multiply.OutputTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputTest::CopyFrom(const OutputTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrpc_matrix_multiply.OutputTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputTest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OutputTest::InternalSwap(OutputTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputTest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace myrpc_matrix_multiply
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::myrpc_matrix_multiply::proto_Nested* Arena::CreateMaybeMessage< ::myrpc_matrix_multiply::proto_Nested >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myrpc_matrix_multiply::proto_Nested >(arena);
}
template<> PROTOBUF_NOINLINE ::myrpc_matrix_multiply::proto* Arena::CreateMaybeMessage< ::myrpc_matrix_multiply::proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myrpc_matrix_multiply::proto >(arena);
}
template<> PROTOBUF_NOINLINE ::myrpc_matrix_multiply::InputTest* Arena::CreateMaybeMessage< ::myrpc_matrix_multiply::InputTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myrpc_matrix_multiply::InputTest >(arena);
}
template<> PROTOBUF_NOINLINE ::myrpc_matrix_multiply::OutputTest* Arena::CreateMaybeMessage< ::myrpc_matrix_multiply::OutputTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myrpc_matrix_multiply::OutputTest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
