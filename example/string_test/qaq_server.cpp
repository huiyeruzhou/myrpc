/*
 * You can write copyrights rules here. These rules will be copied into the outputs.
 */

/*
 * Generated by erpcgen 1.9.1 on Tue Mar 28 10:14:18 2023.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "qaq_server.h"
#include "port.h"
#include <new>

#if 10901 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif



// Call the correct server shim based on method unique ID.
rpc_status aaa_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    rpc_status erpcStatus;
    switch (methodId)
    {
        case kaaa_erpctest_id:
        {
            erpcStatus = erpctest_shim(codec, messageFactory, sequence);
            break;
        }

        default:
        {
            erpcStatus = rpc_status::InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for erpctest of aaa interface.
rpc_status aaa_service::erpctest_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    rpc_status err = rpc_status::Success;

    char * str = NULL;

    // startReadMessage() was already called before this shim was invoked.

    uint32_t str_len;
    char * str_local;
    codec->readString(&str_len, &str_local);
    str = (char*) erpc_malloc((str_len + 1) * sizeof(char));
    if ((str == NULL) || (str_local == NULL))
    {
        codec->updateStatus(rpc_status::MemoryError);
    }
    else
    {
        memcpy(str, str_local, str_len);
        (str)[str_len] = 0;
    }

    err = codec->getStatus();
    if (err == rpc_status::Success)
    {
        // Invoke the actual served function.

        erpctest(str);


        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == rpc_status::Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kaaa_service_id, kaaa_erpctest_id, sequence);

        err = codec->getStatus();
    }

    erpc_free(str);

    return err;
}

erpc_service_t create_aaa_service(void)
{
    erpc_service_t service;
    service = new (nothrow) aaa_service();
    return service;
}

void destroy_aaa_service(erpc_service_t service)
{
    erpc_assert(service != NULL);
    delete (aaa_service *)service;
}

