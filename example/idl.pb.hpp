/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_MYRPC_IDL_PB_H_INCLUDED
#define PB_MYRPC_IDL_PB_H_INCLUDED
#include <pb.h>
#include <server/service.hpp>
#include <client/rpc_client.hpp>
#include <rpc_status.hpp>
#include <pb_encode.h>
#include <pb_decode.h>
using namespace erpc;

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _myrpc_Input {
    int32_t r;
    int32_t g;
    int32_t b;
} myrpc_Input;

typedef struct _myrpc_Output {
    bool success;
} myrpc_Output;


#ifdef __cplusplus
extern "C" {
#endif

    /* Initializer values for message structs */
#define myrpc_Input_init_default                 {0, 0, 0}
#define myrpc_Output_init_default                {0}
#define myrpc_Input_init_zero                    {0, 0, 0}
#define myrpc_Output_init_zero                   {0}

/* Field tags (for use in manual encoding/decoding) */
#define myrpc_Input_r_tag                        1
#define myrpc_Input_g_tag                        2
#define myrpc_Input_b_tag                        3
#define myrpc_Output_success_tag                 1

/* Struct field encoding specification for nanopb */
#define myrpc_Input_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    r,                 1) \
X(a, STATIC,   REQUIRED, INT32,    g,                 2) \
X(a, STATIC,   REQUIRED, INT32,    b,                 3)
#define myrpc_Input_CALLBACK NULL
#define myrpc_Input_DEFAULT NULL

#define myrpc_Output_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BOOL,     success,           1)
#define myrpc_Output_CALLBACK NULL
#define myrpc_Output_DEFAULT NULL

    extern const pb_msgdesc_t myrpc_Input_msg;
    extern const pb_msgdesc_t myrpc_Output_msg;

    /* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define myrpc_Input_fields &myrpc_Input_msg
#define myrpc_Output_fields &myrpc_Output_msg

/* Maximum encoded size of messages (where known) */
#define myrpc_Input_size                         33
#define myrpc_Output_size                        2

/* Service ID */

/* Service Definations */
    class myrpc_LEDControl_Service: public erpc::Service {
    public:
        myrpc_LEDControl_Service(): erpc::Service("/myrpc.LEDControl/setColor") {};
        virtual ~myrpc_LEDControl_Service() {}
        virtual void  setColor(myrpc_Input *request, myrpc_Output *response) = 0;
        virtual rpc_status handleInvocation(void *input, void *output) override;
        virtual void filledMsgDesc(const pb_msgdesc_t **input_desc, void **input_msg, const pb_msgdesc_t **output_desc, void **output) override;
        virtual void destroyMsg(void *input, void *output) override;
    };

    /* Client Defination */
    class myrpc_LEDControl_Client: public erpc::Client {
    public:
        myrpc_LEDControl_Client(const char *host, uint16_t port): erpc::Client(host, port) {}
        virtual ~myrpc_LEDControl_Client() {}
        rpc_status setColor(myrpc_Input *request, myrpc_Output *response);
    };
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
