/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_MYRPC_IDL_PB_HPP_INCLUDED
#define PB_MYRPC_IDL_PB_HPP_INCLUDED
#include <pb.h>
#include <rpc_status.hpp>
#include <pb_encode.h>
#include <pb_decode.h>
#include <memory>
#include <functional>
#include <server/service.hpp>
#include <client/rpc_client.hpp>
#include <server/simple_server.hpp>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _myrpc_Input {
    char *color;
} myrpc_Input;

typedef struct _myrpc_Output {
    bool success;
} myrpc_Output;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define myrpc_Input_init_default                 {NULL}
#define myrpc_Output_init_default                {0}
#define myrpc_Input_init_zero                    {NULL}
#define myrpc_Output_init_zero                   {0}

/* Field tags (for use in manual encoding/decoding) */
#define myrpc_Input_color_tag                    1
#define myrpc_Output_success_tag                 1

/* Struct field encoding specification for nanopb */
#define myrpc_Input_FIELDLIST(X, a) \
X(a, POINTER,  REQUIRED, STRING,   color,             1)
#define myrpc_Input_CALLBACK NULL
#define myrpc_Input_DEFAULT NULL

#define myrpc_Output_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BOOL,     success,           1)
#define myrpc_Output_CALLBACK NULL
#define myrpc_Output_DEFAULT NULL

extern const pb_msgdesc_t myrpc_Input_msg;
extern const pb_msgdesc_t myrpc_Output_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define myrpc_Input_fields &myrpc_Input_msg
#define myrpc_Output_fields &myrpc_Output_msg

/* Maximum encoded size of messages (where known) */
/* myrpc_Input_size depends on runtime parameters */
#define myrpc_Output_size                        2

/* Service Definations */
class myrpc_LEDControl_Service : public erpc::Service {
public:
    myrpc_LEDControl_Service();
    virtual ~myrpc_LEDControl_Service() {}
	using erpc::Service::Service;
	using erpc::Service::addMethod;
    virtual rpc_status setColor(myrpc_Input *request, myrpc_Output *response);
};

/* Client Defination */
class myrpc_LEDControl_Client : public erpc::Client {
public:
    myrpc_LEDControl_Client(const char *host, uint16_t port): erpc::Client(host, port) {}
    virtual ~myrpc_LEDControl_Client() {}
	using erpc::Client::close;
	using erpc::Client::open;
	using erpc::Client::Client;
    virtual rpc_status setColor(myrpc_Input *request, myrpc_Output *response);
};
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
