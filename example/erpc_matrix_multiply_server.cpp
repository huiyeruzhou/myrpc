/*
 * You can write copyrights rules here. These rules will be copied into the outputs.
 */

/*
 * Generated by erpcgen 1.9.1 on Thu Mar 30 20:15:37 2023.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "erpc_matrix_multiply_server.h"
#include "port/port.h"
#include <new>

#if 10901 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif



// Constant variable definitions
#pragma weak matrix_size
extern const int32_t matrix_size = 2;



// Call the correct server shim based on method unique ID.
rpc_status MatrixMultiplyService_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    rpc_status erpcStatus;
    switch (methodId)
    {
        case kMatrixMultiplyService_erpcMatrixMultiply_id:
        {
            erpcStatus = erpcMatrixMultiply_shim(codec, messageFactory, sequence);
            break;
        }

        case kMatrixMultiplyService_erpctest_id:
        {
            erpcStatus = erpctest_shim(codec, messageFactory, sequence);
            break;
        }

        default:
        {
            erpcStatus = rpc_status::InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for erpcMatrixMultiply of MatrixMultiplyService interface.
rpc_status MatrixMultiplyService_service::erpcMatrixMultiply_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
#pragma GCC diagnostic push  
#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
    rpc_status err = rpc_status::Success;

    Matrix matrix1;
    Matrix matrix2;
    Matrix result_matrix;

    // startReadMessage() was already called before this shim was invoked.

    for (uint32_t arrayCount0 = 0U; arrayCount0 < 2U; ++arrayCount0)
    {
        for (uint32_t arrayCount1 = 0U; arrayCount1 < 2U; ++arrayCount1)
        {
            codec->read(&matrix1[arrayCount0][arrayCount1]);
        }
    }

    for (uint32_t arrayCount0 = 0U; arrayCount0 < 2U; ++arrayCount0)
    {
        for (uint32_t arrayCount1 = 0U; arrayCount1 < 2U; ++arrayCount1)
        {
            codec->read(&matrix2[arrayCount0][arrayCount1]);
        }
    }

    err = codec->getStatus();
    if (err == rpc_status::Success)
    {
        // Invoke the actual served function.

        erpcMatrixMultiply(matrix1, matrix2, result_matrix);


        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == rpc_status::Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kMatrixMultiplyService_service_id, kMatrixMultiplyService_erpcMatrixMultiply_id, sequence);

        for (uint32_t arrayCount0 = 0U; arrayCount0 < 2U; ++arrayCount0)
        {
            for (uint32_t arrayCount1 = 0U; arrayCount1 < 2U; ++arrayCount1)
            {
                codec->write(result_matrix[arrayCount0][arrayCount1]);
            }
        }

        err = codec->getStatus();
    }

    return err;
#pragma GCC diagnostic pop 
}

// Server shim for erpctest of MatrixMultiplyService interface.
rpc_status MatrixMultiplyService_service::erpctest_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
#pragma GCC diagnostic push  
#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
    rpc_status err = rpc_status::Success;

    int32_t num1;
    int32_t num2;
    int32_t ret;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&num1);

    codec->read(&num2);

    err = codec->getStatus();
    if (err == rpc_status::Success)
    {
        // Invoke the actual served function.

        erpctest(num1, num2, &ret);


        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == rpc_status::Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kMatrixMultiplyService_service_id, kMatrixMultiplyService_erpctest_id, sequence);

        codec->write(ret);

        err = codec->getStatus();
    }

    return err;
#pragma GCC diagnostic pop 
}

erpc_service_t create_MatrixMultiplyService_service(void)
{
    erpc_service_t service;
    service = new (nothrow) MatrixMultiplyService_service();
    return service;
}

void destroy_MatrixMultiplyService_service(erpc_service_t service)
{
    erpc_assert(service != NULL);
    delete (MatrixMultiplyService_service *)service;
}

