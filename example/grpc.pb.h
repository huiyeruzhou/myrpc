/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_HELLOWORLD_GRPC_PB_H_INCLUDED
#define PB_HELLOWORLD_GRPC_PB_H_INCLUDED
#include <pb.h>
#include <server/service.hpp>
#include <client/rpc_client.hpp>
#include <codec/codec_base.hpp>
#include <rpc_status.hpp>
#include <pb_encode.h>
#include <pb_decode.h>
using namespace erpc;

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* The request message containing the user's name. */
typedef struct _helloworld_HelloRequest {
    char *name;
} helloworld_HelloRequest;

/* The response message containing the greetings */
typedef struct _helloworld_HelloReply {
    char *message;
} helloworld_HelloReply;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define helloworld_HelloRequest_init_default     {NULL}
#define helloworld_HelloReply_init_default       {NULL}
#define helloworld_HelloRequest_init_zero        {NULL}
#define helloworld_HelloReply_init_zero          {NULL}

/* Field tags (for use in manual encoding/decoding) */
#define helloworld_HelloRequest_name_tag         1
#define helloworld_HelloReply_message_tag        1

/* Struct field encoding specification for nanopb */
#define helloworld_HelloRequest_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, STRING,   name,              1)
#define helloworld_HelloRequest_CALLBACK NULL
#define helloworld_HelloRequest_DEFAULT NULL

#define helloworld_HelloReply_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, STRING,   message,           1)
#define helloworld_HelloReply_CALLBACK NULL
#define helloworld_HelloReply_DEFAULT NULL

extern const pb_msgdesc_t helloworld_HelloRequest_msg;
extern const pb_msgdesc_t helloworld_HelloReply_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define helloworld_HelloRequest_fields &helloworld_HelloRequest_msg
#define helloworld_HelloReply_fields &helloworld_HelloReply_msg

/* Maximum encoded size of messages (where known) */
/* helloworld_HelloRequest_size depends on runtime parameters */
/* helloworld_HelloReply_size depends on runtime parameters */

/* Service Definations */
class helloworld_Greeter : public erpc::Service{
public:
    helloworld_Greeter() : erpc::Service(_helloworld_service_id::helloworld_Greeter_id){}
    ~helloworld_Greeter() {}
    const char* name = "helloworld_Greeter";
    void SayHello(helloworld_HelloRequest *request, helloworld_HelloReply *response);rpc_status SayHello_stub(Codec * codec, MessageBufferFactory *messageFactory, uint32_t methodId);
    } _helloworld_Greeter_method_id;
    virtual rpc_status handleInvocation(uint32_t methodId, uint32_t sequence, Codec *codec,MessageBufferFactory *messageFactory);
};

/* Client Defination */
class helloworld_Greeter_Client : public erpc::Client{
public:
    helloworld_Greeter_Client(const char *host, uint16_t port, erpc::MessageBufferFactory *messageFactory) : erpc::Client(host, port, messageFactory) {}
    ~helloworld_Greeter_Client(){}
    void SayHello(helloworld_HelloRequest *request, helloworld_HelloReply *response);};
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
