/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.4.8-dev */

#include "example/idl.pb.hpp"
#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

PB_BIND(myrpc_Input, myrpc_Input, AUTO)


PB_BIND(myrpc_Output, myrpc_Output, AUTO)



/* Server stub */
void myrpc_LEDControl_Service::destroyMsg(void *input, void *output) {
    delete (myrpc_Input *) input;
    delete (myrpc_Output *) output;
}
void myrpc_LEDControl_Service::filledMsgDesc(const pb_msgdesc_t **input_desc, void **input_msg, const pb_msgdesc_t **output_desc, void **output) {
    *input_desc = myrpc_Input_fields;
    *input_msg = new myrpc_Input();
    *output_desc = myrpc_Output_fields;
    *output = new myrpc_Output();
}
rpc_status myrpc_LEDControl_Service::handleInvocation(void *input, void *output) {

    myrpc_Input *req = (myrpc_Input *) input;
    myrpc_Output *rsp = (myrpc_Output *) output;
    setColor(req, rsp);
    return rpc_status::Success;
}


/* Client stub */
rpc_status myrpc_LEDControl_Client::setColor(myrpc_Input *req, myrpc_Output *rsp) {
    const char *path = "/myrpc.LEDControl/setColor";
    char *q = new char[strlen(path)];
    strcpy(q, "/myrpc.MatrixMultiplyService/setColor");
    return performRequest(reinterpret_cast<char *>(q), myrpc_Input_fields, (void *) req, myrpc_Output_fields, (void *) rsp);
}
