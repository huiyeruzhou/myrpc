/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_MYRPC_IDL_PB_H_INCLUDED
#define PB_MYRPC_IDL_PB_H_INCLUDED
#include <pb.h>
#include <server/service.hpp>
#include <client/rpc_client.hpp>
#include <codec/codec_base.hpp>
#include <rpc_status.hpp>
#include <pb_encode.h>
#include <pb_decode.h>
using namespace erpc;

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _myrpc_proto {
    char dummy_field;
} myrpc_proto;

typedef struct _myrpc_proto_Nested {
    int32_t num1;
    int32_t num2;
} myrpc_proto_Nested;

typedef struct _myrpc_InputTest {
    int32_t num1;
    int32_t num2;
} myrpc_InputTest;

typedef struct _myrpc_OutputTest {
    int32_t ret;
} myrpc_OutputTest;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define myrpc_proto_init_default                 {0}
#define myrpc_proto_Nested_init_default          {0, 0}
#define myrpc_InputTest_init_default             {0, 0}
#define myrpc_OutputTest_init_default            {0}
#define myrpc_proto_init_zero                    {0}
#define myrpc_proto_Nested_init_zero             {0, 0}
#define myrpc_InputTest_init_zero                {0, 0}
#define myrpc_OutputTest_init_zero               {0}

/* Field tags (for use in manual encoding/decoding) */
#define myrpc_proto_Nested_num1_tag              1
#define myrpc_proto_Nested_num2_tag              2
#define myrpc_InputTest_num1_tag                 1
#define myrpc_InputTest_num2_tag                 2
#define myrpc_OutputTest_ret_tag                 1

/* Struct field encoding specification for nanopb */
#define myrpc_proto_FIELDLIST(X, a) \

#define myrpc_proto_CALLBACK NULL
#define myrpc_proto_DEFAULT NULL

#define myrpc_proto_Nested_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    num1,              1) \
X(a, STATIC,   REQUIRED, INT32,    num2,              2)
#define myrpc_proto_Nested_CALLBACK NULL
#define myrpc_proto_Nested_DEFAULT NULL

#define myrpc_InputTest_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    num1,              1) \
X(a, STATIC,   REQUIRED, INT32,    num2,              2)
#define myrpc_InputTest_CALLBACK NULL
#define myrpc_InputTest_DEFAULT NULL

#define myrpc_OutputTest_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    ret,               1)
#define myrpc_OutputTest_CALLBACK NULL
#define myrpc_OutputTest_DEFAULT NULL

extern const pb_msgdesc_t myrpc_proto_msg;
extern const pb_msgdesc_t myrpc_proto_Nested_msg;
extern const pb_msgdesc_t myrpc_InputTest_msg;
extern const pb_msgdesc_t myrpc_OutputTest_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define myrpc_proto_fields &myrpc_proto_msg
#define myrpc_proto_Nested_fields &myrpc_proto_Nested_msg
#define myrpc_InputTest_fields &myrpc_InputTest_msg
#define myrpc_OutputTest_fields &myrpc_OutputTest_msg

/* Maximum encoded size of messages (where known) */
#define myrpc_InputTest_size                     22
#define myrpc_OutputTest_size                    11
#define myrpc_proto_Nested_size                  22
#define myrpc_proto_size                         0

/* Service ID */
typedef enum {
    myrpc_MatrixMultiplyService_id = 0,
} _myrpc_service_id;

/* Service Definations */
class myrpc_MatrixMultiplyService : public erpc::Service{
public:
    myrpc_MatrixMultiplyService() : erpc::Service(_myrpc_service_id::myrpc_MatrixMultiplyService_id){}
    ~myrpc_MatrixMultiplyService() {}
    const char* name = "myrpc_MatrixMultiplyService";
    virtual void myrpctest(myrpc_InputTest *request, myrpc_OutputTest *response){}
rpc_status myrpctest_stub(Codec * codec, MessageBufferFactory *messageFactory, uint32_t methodId);

/* Method ID */
    typedef enum {
    myrpctest_id = 0,
    } _myrpc_MatrixMultiplyService_method_id;
    virtual rpc_status handleInvocation(uint32_t methodId, uint32_t sequence, Codec *codec,MessageBufferFactory *messageFactory);
};

/* Client Defination */
class myrpc_MatrixMultiplyService_Client : public erpc::Client{
public:
    myrpc_MatrixMultiplyService_Client(const char *host, uint16_t port, erpc::MessageBufferFactory *messageFactory) : erpc::Client(host, port, messageFactory) {}
    ~myrpc_MatrixMultiplyService_Client(){}
    virtual void myrpctest(myrpc_InputTest *request, myrpc_OutputTest *response);};
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
