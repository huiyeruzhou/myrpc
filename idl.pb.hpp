/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_CAMERA_IDL_PB_HPP_INCLUDED
#define PB_CAMERA_IDL_PB_HPP_INCLUDED
#include <pb.h>
#include <server/service.hpp>
#include <client/rpc_client.hpp>
#include <rpc_status.hpp>
#include <pb_encode.h>
#include <pb_decode.h>
#include <functional>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _camera_Result {
    camera_Result_OK = 0,
    camera_Result_FAILED = 1
} camera_Result;

typedef enum _camera_DataType {
    camera_DataType_TYPE_CSD = 0,
    camera_DataType_TYPE_DATA = 1
} camera_DataType;

/* Struct definitions */
typedef struct _camera_DeviceId {
    int64_t value;
} camera_DeviceId;

typedef struct _camera_Session {
    int32_t accessoryId;
    bool has_deviceId;
    camera_DeviceId deviceId;
} camera_Session;

typedef struct _camera_DeviceCharacter {
    int32_t max_width;
    int32_t max_height;
    int32_t max_fps;
    int32_t min_fps;
} camera_DeviceCharacter;

typedef struct _camera_BasicDevice {
    char *name;
    bool has_id;
    camera_DeviceId id;
    int32_t direction;
    int32_t type;
    bool has_character;
    camera_DeviceCharacter character;
} camera_BasicDevice;

typedef struct _camera_BasicHolder {
    int32_t holder_type;
    int64_t holder_id;
    char *holder_name;
} camera_BasicHolder;

typedef struct _camera_Size {
    int32_t width;
    int32_t height;
} camera_Size;

typedef struct _camera_Range {
    int32_t lower;
    int32_t upper;
} camera_Range;

typedef struct _camera_CameraSession {
    bool has_id;
    camera_DeviceId id;
    bool has_size;
    camera_Size size;
    bool has_fpsRange;
    camera_Range fpsRange;
} camera_CameraSession;

typedef struct _camera_VirtualCameraDevice {
    bool has_basic;
    camera_BasicDevice basic;
    char *characteristics;
} camera_VirtualCameraDevice;

typedef struct _camera_CameraInfoRequest {
    int32_t accessory_id;
} camera_CameraInfoRequest;

typedef struct _camera_CameraInfoResult {
    bool has_holder;
    camera_BasicHolder holder;
    pb_size_t devices_count;
    struct _camera_VirtualCameraDevice *devices;
} camera_CameraInfoResult;

typedef struct _camera_RawData {
    pb_bytes_array_t *data;
} camera_RawData;

typedef struct _camera_CaptureRequest {
    bool has_id;
    camera_DeviceId id;
    char *metadata;
} camera_CaptureRequest;

typedef struct _camera_CaptureResult {
    bool has_id;
    camera_DeviceId id;
    camera_DataType type;
    int64_t frameNumber;
    bool has_raw;
    camera_RawData raw;
} camera_CaptureResult;

typedef struct _camera_CameraResult {
    camera_Result result;
} camera_CameraResult;

typedef struct _camera_RtspUrl {
    char *url;
} camera_RtspUrl;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _camera_Result_MIN camera_Result_OK
#define _camera_Result_MAX camera_Result_FAILED
#define _camera_Result_ARRAYSIZE ((camera_Result)(camera_Result_FAILED+1))

#define _camera_DataType_MIN camera_DataType_TYPE_CSD
#define _camera_DataType_MAX camera_DataType_TYPE_DATA
#define _camera_DataType_ARRAYSIZE ((camera_DataType)(camera_DataType_TYPE_DATA+1))














#define camera_CaptureResult_type_ENUMTYPE camera_DataType

#define camera_CameraResult_result_ENUMTYPE camera_Result



/* Initializer values for message structs */
#define camera_DeviceId_init_default             {0}
#define camera_Session_init_default              {0, false, camera_DeviceId_init_default}
#define camera_DeviceCharacter_init_default      {0, 0, 0, 0}
#define camera_BasicDevice_init_default          {NULL, false, camera_DeviceId_init_default, 0, 0, false, camera_DeviceCharacter_init_default}
#define camera_BasicHolder_init_default          {0, 0, NULL}
#define camera_Size_init_default                 {0, 0}
#define camera_Range_init_default                {0, 0}
#define camera_CameraSession_init_default        {false, camera_DeviceId_init_default, false, camera_Size_init_default, false, camera_Range_init_default}
#define camera_VirtualCameraDevice_init_default  {false, camera_BasicDevice_init_default, NULL}
#define camera_CameraInfoRequest_init_default    {0}
#define camera_CameraInfoResult_init_default     {false, camera_BasicHolder_init_default, 0, NULL}
#define camera_RawData_init_default              {NULL}
#define camera_CaptureRequest_init_default       {false, camera_DeviceId_init_default, NULL}
#define camera_CaptureResult_init_default        {false, camera_DeviceId_init_default, _camera_DataType_MIN, 0, false, camera_RawData_init_default}
#define camera_CameraResult_init_default         {_camera_Result_MIN}
#define camera_RtspUrl_init_default              {NULL}
#define camera_DeviceId_init_zero                {0}
#define camera_Session_init_zero                 {0, false, camera_DeviceId_init_zero}
#define camera_DeviceCharacter_init_zero         {0, 0, 0, 0}
#define camera_BasicDevice_init_zero             {NULL, false, camera_DeviceId_init_zero, 0, 0, false, camera_DeviceCharacter_init_zero}
#define camera_BasicHolder_init_zero             {0, 0, NULL}
#define camera_Size_init_zero                    {0, 0}
#define camera_Range_init_zero                   {0, 0}
#define camera_CameraSession_init_zero           {false, camera_DeviceId_init_zero, false, camera_Size_init_zero, false, camera_Range_init_zero}
#define camera_VirtualCameraDevice_init_zero     {false, camera_BasicDevice_init_zero, NULL}
#define camera_CameraInfoRequest_init_zero       {0}
#define camera_CameraInfoResult_init_zero        {false, camera_BasicHolder_init_zero, 0, NULL}
#define camera_RawData_init_zero                 {NULL}
#define camera_CaptureRequest_init_zero          {false, camera_DeviceId_init_zero, NULL}
#define camera_CaptureResult_init_zero           {false, camera_DeviceId_init_zero, _camera_DataType_MIN, 0, false, camera_RawData_init_zero}
#define camera_CameraResult_init_zero            {_camera_Result_MIN}
#define camera_RtspUrl_init_zero                 {NULL}

/* Field tags (for use in manual encoding/decoding) */
#define camera_DeviceId_value_tag                1
#define camera_Session_accessoryId_tag           1
#define camera_Session_deviceId_tag              2
#define camera_DeviceCharacter_max_width_tag     1
#define camera_DeviceCharacter_max_height_tag    2
#define camera_DeviceCharacter_max_fps_tag       3
#define camera_DeviceCharacter_min_fps_tag       4
#define camera_BasicDevice_name_tag              1
#define camera_BasicDevice_id_tag                2
#define camera_BasicDevice_direction_tag         3
#define camera_BasicDevice_type_tag              4
#define camera_BasicDevice_character_tag         5
#define camera_BasicHolder_holder_type_tag       1
#define camera_BasicHolder_holder_id_tag         2
#define camera_BasicHolder_holder_name_tag       3
#define camera_Size_width_tag                    1
#define camera_Size_height_tag                   2
#define camera_Range_lower_tag                   1
#define camera_Range_upper_tag                   2
#define camera_CameraSession_id_tag              1
#define camera_CameraSession_size_tag            2
#define camera_CameraSession_fpsRange_tag        3
#define camera_VirtualCameraDevice_basic_tag     1
#define camera_VirtualCameraDevice_characteristics_tag 2
#define camera_CameraInfoRequest_accessory_id_tag 1
#define camera_CameraInfoResult_holder_tag       1
#define camera_CameraInfoResult_devices_tag      2
#define camera_RawData_data_tag                  1
#define camera_CaptureRequest_id_tag             1
#define camera_CaptureRequest_metadata_tag       2
#define camera_CaptureResult_id_tag              1
#define camera_CaptureResult_type_tag            2
#define camera_CaptureResult_frameNumber_tag     3
#define camera_CaptureResult_raw_tag             4
#define camera_CameraResult_result_tag           1
#define camera_RtspUrl_url_tag                   1

/* Struct field encoding specification for nanopb */
#define camera_DeviceId_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    value,             1)
#define camera_DeviceId_CALLBACK NULL
#define camera_DeviceId_DEFAULT NULL

#define camera_Session_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    accessoryId,       1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  deviceId,          2)
#define camera_Session_CALLBACK NULL
#define camera_Session_DEFAULT NULL
#define camera_Session_deviceId_MSGTYPE camera_DeviceId

#define camera_DeviceCharacter_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    max_width,         1) \
X(a, STATIC,   SINGULAR, INT32,    max_height,        2) \
X(a, STATIC,   SINGULAR, INT32,    max_fps,           3) \
X(a, STATIC,   SINGULAR, INT32,    min_fps,           4)
#define camera_DeviceCharacter_CALLBACK NULL
#define camera_DeviceCharacter_DEFAULT NULL

#define camera_BasicDevice_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  id,                2) \
X(a, STATIC,   SINGULAR, INT32,    direction,         3) \
X(a, STATIC,   SINGULAR, INT32,    type,              4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  character,         5)
#define camera_BasicDevice_CALLBACK NULL
#define camera_BasicDevice_DEFAULT NULL
#define camera_BasicDevice_id_MSGTYPE camera_DeviceId
#define camera_BasicDevice_character_MSGTYPE camera_DeviceCharacter

#define camera_BasicHolder_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    holder_type,       1) \
X(a, STATIC,   SINGULAR, INT64,    holder_id,         2) \
X(a, POINTER,  SINGULAR, STRING,   holder_name,       3)
#define camera_BasicHolder_CALLBACK NULL
#define camera_BasicHolder_DEFAULT NULL

#define camera_Size_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    width,             1) \
X(a, STATIC,   SINGULAR, INT32,    height,            2)
#define camera_Size_CALLBACK NULL
#define camera_Size_DEFAULT NULL

#define camera_Range_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    lower,             1) \
X(a, STATIC,   SINGULAR, INT32,    upper,             2)
#define camera_Range_CALLBACK NULL
#define camera_Range_DEFAULT NULL

#define camera_CameraSession_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  id,                1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  size,              2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  fpsRange,          3)
#define camera_CameraSession_CALLBACK NULL
#define camera_CameraSession_DEFAULT NULL
#define camera_CameraSession_id_MSGTYPE camera_DeviceId
#define camera_CameraSession_size_MSGTYPE camera_Size
#define camera_CameraSession_fpsRange_MSGTYPE camera_Range

#define camera_VirtualCameraDevice_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  basic,             1) \
X(a, POINTER,  SINGULAR, STRING,   characteristics,   2)
#define camera_VirtualCameraDevice_CALLBACK NULL
#define camera_VirtualCameraDevice_DEFAULT NULL
#define camera_VirtualCameraDevice_basic_MSGTYPE camera_BasicDevice

#define camera_CameraInfoRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    accessory_id,      1)
#define camera_CameraInfoRequest_CALLBACK NULL
#define camera_CameraInfoRequest_DEFAULT NULL

#define camera_CameraInfoResult_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  holder,            1) \
X(a, POINTER,  REPEATED, MESSAGE,  devices,           2)
#define camera_CameraInfoResult_CALLBACK NULL
#define camera_CameraInfoResult_DEFAULT NULL
#define camera_CameraInfoResult_holder_MSGTYPE camera_BasicHolder
#define camera_CameraInfoResult_devices_MSGTYPE camera_VirtualCameraDevice

#define camera_RawData_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, BYTES,    data,              1)
#define camera_RawData_CALLBACK NULL
#define camera_RawData_DEFAULT NULL

#define camera_CaptureRequest_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  id,                1) \
X(a, POINTER,  SINGULAR, STRING,   metadata,          2)
#define camera_CaptureRequest_CALLBACK NULL
#define camera_CaptureRequest_DEFAULT NULL
#define camera_CaptureRequest_id_MSGTYPE camera_DeviceId

#define camera_CaptureResult_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  id,                1) \
X(a, STATIC,   SINGULAR, UENUM,    type,              2) \
X(a, STATIC,   SINGULAR, INT64,    frameNumber,       3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  raw,               4)
#define camera_CaptureResult_CALLBACK NULL
#define camera_CaptureResult_DEFAULT NULL
#define camera_CaptureResult_id_MSGTYPE camera_DeviceId
#define camera_CaptureResult_raw_MSGTYPE camera_RawData

#define camera_CameraResult_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    result,            1)
#define camera_CameraResult_CALLBACK NULL
#define camera_CameraResult_DEFAULT NULL

#define camera_RtspUrl_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, STRING,   url,               1)
#define camera_RtspUrl_CALLBACK NULL
#define camera_RtspUrl_DEFAULT NULL

extern const pb_msgdesc_t camera_DeviceId_msg;
extern const pb_msgdesc_t camera_Session_msg;
extern const pb_msgdesc_t camera_DeviceCharacter_msg;
extern const pb_msgdesc_t camera_BasicDevice_msg;
extern const pb_msgdesc_t camera_BasicHolder_msg;
extern const pb_msgdesc_t camera_Size_msg;
extern const pb_msgdesc_t camera_Range_msg;
extern const pb_msgdesc_t camera_CameraSession_msg;
extern const pb_msgdesc_t camera_VirtualCameraDevice_msg;
extern const pb_msgdesc_t camera_CameraInfoRequest_msg;
extern const pb_msgdesc_t camera_CameraInfoResult_msg;
extern const pb_msgdesc_t camera_RawData_msg;
extern const pb_msgdesc_t camera_CaptureRequest_msg;
extern const pb_msgdesc_t camera_CaptureResult_msg;
extern const pb_msgdesc_t camera_CameraResult_msg;
extern const pb_msgdesc_t camera_RtspUrl_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define camera_DeviceId_fields &camera_DeviceId_msg
#define camera_Session_fields &camera_Session_msg
#define camera_DeviceCharacter_fields &camera_DeviceCharacter_msg
#define camera_BasicDevice_fields &camera_BasicDevice_msg
#define camera_BasicHolder_fields &camera_BasicHolder_msg
#define camera_Size_fields &camera_Size_msg
#define camera_Range_fields &camera_Range_msg
#define camera_CameraSession_fields &camera_CameraSession_msg
#define camera_VirtualCameraDevice_fields &camera_VirtualCameraDevice_msg
#define camera_CameraInfoRequest_fields &camera_CameraInfoRequest_msg
#define camera_CameraInfoResult_fields &camera_CameraInfoResult_msg
#define camera_RawData_fields &camera_RawData_msg
#define camera_CaptureRequest_fields &camera_CaptureRequest_msg
#define camera_CaptureResult_fields &camera_CaptureResult_msg
#define camera_CameraResult_fields &camera_CameraResult_msg
#define camera_RtspUrl_fields &camera_RtspUrl_msg

/* Maximum encoded size of messages (where known) */
/* camera_BasicDevice_size depends on runtime parameters */
/* camera_BasicHolder_size depends on runtime parameters */
/* camera_VirtualCameraDevice_size depends on runtime parameters */
/* camera_CameraInfoResult_size depends on runtime parameters */
/* camera_RawData_size depends on runtime parameters */
/* camera_CaptureRequest_size depends on runtime parameters */
/* camera_CaptureResult_size depends on runtime parameters */
/* camera_RtspUrl_size depends on runtime parameters */
#define camera_CameraInfoRequest_size            11
#define camera_CameraResult_size                 2
#define camera_CameraSession_size                61
#define camera_DeviceCharacter_size              44
#define camera_DeviceId_size                     11
#define camera_Range_size                        22
#define camera_Session_size                      24
#define camera_Size_size                         22

/* Service Definations */
class camera_VirtualCamera_Service : public erpc::Service {
public:
    camera_VirtualCamera_Service();
    virtual ~camera_VirtualCamera_Service() {}
	using erpc::Service::Service;
	using erpc::Service::addMethod;
    virtual rpc_status getCameraInfo(camera_CameraInfoRequest *request, camera_CameraInfoResult *response);
    virtual rpc_status open(camera_CameraSession *request, camera_CameraResult *response);
    virtual rpc_status close(camera_DeviceId *request, camera_CameraResult *response);
    virtual rpc_status capture(camera_CaptureRequest *request, camera_CaptureResult *response);
    virtual rpc_status configure(camera_CameraSession *request, camera_CameraResult *response);
    virtual rpc_status startRtsp(camera_CaptureRequest *request, camera_RtspUrl *response);
};

/* Client Defination */
class camera_VirtualCamera_Client : public erpc::Client {
public:
    camera_VirtualCamera_Client(const char *host, uint16_t port): erpc::Client(host, port) {}
    virtual ~camera_VirtualCamera_Client() {}
	using erpc::Client::open;
	using erpc::Client::Client;
    virtual rpc_status getCameraInfo(camera_CameraInfoRequest *request, camera_CameraInfoResult *response);
    virtual rpc_status open(camera_CameraSession *request, camera_CameraResult *response);
    virtual rpc_status close(camera_DeviceId *request, camera_CameraResult *response);
    virtual rpc_status capture(camera_CaptureRequest *request, camera_CaptureResult *response);
    virtual rpc_status configure(camera_CameraSession *request, camera_CameraResult *response);
    virtual rpc_status startRtsp(camera_CaptureRequest *request, camera_RtspUrl *response);
};
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
